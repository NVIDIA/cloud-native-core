- hosts: all
  vars_files:
    - cns_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
   - name: Reload the configurations
     become: true
     block:
      - name: reload daemon
        systemd_service:
          daemon_reload: true
        failed_when: false

      - name: restart services
        failed_when: false
        systemd_service:
          name: "{{ item }}"
          state: restarted
        with_items:
          - cri-docker
          - docker
          - kubelet
          - containerd
          - crio
          - cri-o

- hosts: master
  vars_files:
    - cns_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
   - name: Get Nvidia Tegra Release
     shell: uname -r | awk -F'-' '{print $2}'
     register: release

   - set_fact:
      release: "{{ release.stdout }}"

   - name: Reset Kubernetes component
     when: container_runtime == 'cri-o'
     shell: "timeout 45 kubeadm reset --cri-socket=unix:///var/run/crio/crio.sock --force"
     become: true
     failed_when: false
     no_log: True

   - name: Reset Kubernetes component
     when: container_runtime == 'cri-dockerd'
     shell: "timeout 45 kubeadm reset --cri-socket=unix:///run/cri-dockerd.sock --force"
     become: true
     failed_when: false
     no_log: True

   - name: Reset Kubernetes component
     when: container_runtime == 'containerd'
     shell: "timeout 45 kubeadm reset --cri-socket=unix:///run/containerd/containerd.sock --force"
     become: true
     failed_when: false
     no_log: True

   - name: reload daemon
     become: true
     systemd_service:
       daemon_reload: true
     failed_when: false

   - name: remove etcd directory
     become: true
     file:
       path: "/var/lib/etcd"
       state: absent

   - name: Check proxy conf exists
     when: proxy == true
     lineinfile:
       path: /etc/environment
       regexp: '^http_proxy=*'
       state: absent
     check_mode: yes
     changed_when: false
     register: proxyconf

   - name: Get Host IP
     shell: interface=$(ip a | grep 'state UP' |  egrep 'enp*|ens*|eno*|enc*|eth*|bond*|wlan*' | awk '{print $2}' | sed 's/://g'); for i in $interface; do ifconfig $i | grep -iw inet | awk '{print $2}'; done
     register: network

   - name: subnet information
     shell: "echo {{ network.stdout_lines[0] }} | cut -d. -f1-3"
     register: subnet

   - name: add proxy lines to environment
     when: proxy == true and not proxyconf.found
     become: true
     lineinfile:
       dest: /etc/environment
       insertafter: "PATH="
       line: "{{ item }}"
     loop:
       - http_proxy={{ http_proxy }}
       - HTTP_PROXY={{ http_proxy }}
       - https_proxy={{ https_proxy }}
       - HTTPS_PROXY={{ https_proxy }}
       - no_proxy={{ network.stdout_lines[0] }},localhost,127.0.0.0/8,10.96.0.1/24,10.244.0.0/16,192.168.32.0/22,{{ subnet.stdout }}.0/24
       - NO_PROXY={{ network.stdout_lines[0] }},localhost,127.0.0.0/8,10.96.0.1/24,10.244.0.0/16,192.168.32.0/22,{{ subnet.stdout }}.0/24

   - name: source the env
     when: proxy == true and not proxyconf.found
     shell: source /etc/environment
     args:
       executable: /bin/bash

   - name: check default gateway
     shell: ip r | grep default
     failed_when: false
     register: gateway
     when: proxy == true

   - name: add default gateway
     shell: route add -net 0.0.0.0/0 gw {{ network.stdout_lines[0] }}
     when: gateway.rc | default ('') == 1 and proxy == true

   - name: subnet
     set_fact:
       subnet: "{% if release != 'tegra' %}192.168.32.0/22{% elif release == 'tegra' %}10.244.0.0/16{% endif %}"

   - name: CRI Socket
     set_fact:
       cri_socket: "{% if container_runtime == 'containerd' %}unix:///run/containerd/containerd.sock{% elif container_runtime == 'cri-o' %}unix:///var/run/crio/crio.sock{%elif container_runtime == 'cri-dockerd' %}unix:///run/cri-dockerd.sock{% endif %}"

   - name: Iniitialize the Kubernetes cluster using kubeadm and containerd for Cloud Native Stack
     block:
       - name: Generate kubeadm init config
         template:
           src: kubeadm-init-config.template
           dest: /tmp/kubeadm-init-config.yaml

       - name: Run kubeadm init
         command: 'kubeadm init --config=/tmp/kubeadm-init-config.yaml'
         become: true
         register: kubeadm

   - name: Create kube directory
     file:
      path: $HOME/.kube
      state: directory

   - name: admin permissions
     become: true
     file:
       path: /etc/kubernetes/admin.conf
       mode: '0644'

   - name: Copy kubeconfig to home
     copy:
       remote_src: yes
       src:  /etc/kubernetes/admin.conf
       dest:  $HOME/.kube/config
       mode: '0600'

   - pause:
       seconds: 15

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack
     when: "cns_version >= 7.1 and release != 'tegra' or cns_version == 6.4 and release != 'tegra'"
     command: "kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_version }}/manifests/calico.yaml"

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack
     when: "cns_version <= 6.3 and ansible_distribution_major_version == '20' and release != 'tegra' or cns_version == 7.0 and release != 'tegra' and ansible_distribution_major_version == '22'"
     command: "kubectl apply -f https://projectcalico.docs.tigera.io/archive/v{{ calico_version }}/manifests/calico.yaml"

   - name: Update Network plugin for Calico on NVIDIA Cloud Native Stack
     when: "cns_version >= 3.1 and release != 'tegra'"
     shell: "sleep 5; kubectl set env daemonset/calico-node -n kube-system IP_AUTODETECTION_METHOD=interface=ens*,eth*,enc*,bond*,enp*,eno*"

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack
     when: "release == 'tegra'"
     command: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v{{ flannel_version }}/Documentation/kube-flannel.yml"

   - name: Taint the Kubernetes Control Plane node
     failed_when: false
     command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-

   - name: Generate join token IP
     become: true
     shell: kubeadm token create --print-join-command | awk '{print $3}'
     register: kubeadm_join_ip

   - name: Generate join token
     become: true
     shell: kubeadm token create --print-join-command | awk '{print $5}'
     register: kubeadm_join_token

   - name: Generate join token hash
     become: true
     shell: kubeadm token create --print-join-command | awk '{print $7}'
     register: kubeadm_join_hash

   - set_fact:
       api_endpoint: "{{ kubeadm_join_ip.stdout }}"
       kubeadm_token: "{{ kubeadm_join_token.stdout }}"
       ca_cert_hash: "{{ kubeadm_join_hash.stdout }}"

   - name: Generate kubeadm init config
     template:
       src: kubeadm-join.template
       dest: /tmp/kubeadm-join.yaml

   - name: Copy Join Command
     fetch:
       src: "/tmp/kubeadm-join.yaml"
       dest: "/tmp/kubeadm-join.yaml"
       flat: true

- hosts: nodes
  vars_files:
    - cns_values.yaml
  tasks:

   - name: Reset Kubernetes component
     become: true
     shell: "kubeadm reset --force"
     register: reset_cluster
     failed_when: false

   - name: Create kube directory
     become: true
     file:
       path: /etc/kubernetes
       state: directory

   - name: Copy kubeadm-join command to node
     become: true
     copy:
       src: "/tmp/kubeadm-join.yaml"
       dest: "/tmp/kubeadm-join.yaml"

   - name: Get the Active Mellanox NIC on nodes
     when: "enable_network_operator == true and cns_version >= 4.1"
     become: true
     shell: "for device in `sudo lshw -class network -short | grep -i ConnectX | awk '{print $2}' | egrep -v 'Device|path' | sed '/^$/d'`;do echo -n $device; sudo ethtool $device | grep -i 'Link detected'; done | grep yes | awk '{print $1}' > /tmp/$(hostname)-nic"
     register: node_nic

   - name: Copy Mellanox NIC Active File to master
     when: "enable_network_operator == true and cns_version >= 4.1"
     become: true
     fetch:
       src: "/tmp/{{ ansible_nodename }}-nic"
       dest: "/tmp/"
       flat: yes

- hosts: nodes
  tasks:
   - name: Run kubeadm join
     become: true
     shell: "kubeadm join --config=/tmp/kubeadm-join.yaml"

   - pause:
       seconds: 30